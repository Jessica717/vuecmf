<?php
/**
 * 模型服务类
 * Created by www.vuecmf.com
 * User: emei8 <386196596@qq.com>
 * Date: 2019/4/4
 * Time: 23:24
 */

namespace app\api\service;


use think\Db;
use think\Exception;
use think\Loader;

class AuthModelService extends BaseService
{

    protected $prefix; //表前缀

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->model = model('AuthModel'); //初始化模型
        $this->prefix = config('database.prefix');
    }

    /**
     * 生成文件头部注释
     * @return string
     */
    protected function makeFileRemark(){
        $date = date('Y/m/d');
        $day = date('H:i');
        return "<?php
/**
 * Created by www.vuecmf.com
 * User: 386196596@qq.com
 * Date: {$date}
 * Time: {$day}
 */";
    }

    /**
     * 生成模型类
     * @param $model_name
     */
    public function makeModel($model_name){
        //查出所有密码字段
        $pwd_field_arr = Db::name('model_field')->alias('MF')
            ->join('auth_model AM','AM.id = MF.model_id')
            ->where('AM.model_name',$model_name)
            ->where('AM.status',1)
            ->where('MF.status',1)
            ->where('MF.form_type','password')
            ->column('field_name');

        //生成模型
        $modelName = getModelTableName($model_name);
        $model_class_name = Loader::parseName($modelName,1);

        $attr = ''; $fun = '';

        if(!empty($pwd_field_arr)){
            $attr = 'protected $auto = [\''.implode('\',\'',$pwd_field_arr).'\'];';
            $fun = '';
            foreach ($pwd_field_arr as $field){
                $fun .= '
    protected function set'.ucfirst($field).'Attr($value)
    {
        return password_hash($value,PASSWORD_DEFAULT);
    }
    
    ';
            }
        }

        $headRemark = $this->makeFileRemark();

        $model_class = <<<CLASS
{$headRemark}

namespace app\\api\\model;

class {$model_class_name} extends Base
{
    {$attr}
    {$fun}
}
CLASS;
        file_put_contents(__DIR__.'/../model/'.$model_class_name.'.php',$model_class);
    }


    /**
     * 生成模型相关代码及数据
     * @param $data
     * @throws Exception
     */
    public function make($data,$is_add = true){
        Db::startTrans();
        try{
            if(empty($data['model_name'])) throw new Exception('模型名不能为空');
            if(empty($data['id'])) throw new Exception('模型ID不能为空');

            //生成控制器
            $model_name = getModelTableName($data['model_name']);
            $model_class_name = Loader::parseName($model_name,1);
            $headRemark = $this->makeFileRemark();

            $controller_class = <<<CLASS
{$headRemark}

namespace app\\api\\controller;

use think\\facade\\Request;

class {$model_class_name} extends Base
{

    protected function initialize(){
        \$this->model = model('{$model_class_name}');
        if(Request::action() == 'save'){
            \$this->validate = new \\app\\api\\validate\\{$model_class_name}();
        }
    }

}
CLASS;

            file_put_contents(__DIR__.'/../controller/'.$model_class_name.'.php',$controller_class);

            $this->makeModel($data['model_name']);

            //生成验证器
            $validate_class = <<<CLASS
{$headRemark}

namespace app\\api\\validate;

use think\\Validate;

class {$model_class_name} extends Validate
{
    /**
     * 定义验证规则
     * 格式：'字段名'	=>	['规则1','规则2'...]
     *
     * @var array
     */	
	protected \$rule = [];
    
    /**
     * 定义错误信息
     * 格式：'字段名.规则名'	=>	'错误信息'
     *
     * @var array
     */	
    protected \$message = [];
}
CLASS;
            file_put_contents(__DIR__.'/../validate/'.$model_class_name.'.php',$validate_class);

            if($is_add) {
                //创建表，增加是否存在判断
                $sql = 'CREATE TABLE IF NOT EXISTS `' . $this->prefix . $model_name . '` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT \'自增ID\',
  `status` tinyint(4) NOT NULL DEFAULT \'1\' COMMENT \'状态：1=开启，2=关闭\',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=\'' . $data['remark'] . '\';';

                Db::execute($sql);

                //向model_field表 写入相应记录
                Db::execute('DELETE FROM `' . $this->prefix . 'model_field` where model_id = ' . $data['id'] . ';');
                $sql = 'INSERT INTO `' . $this->prefix . 'model_field` ( `model_id`, `label`, `field_name`, `type`, `length`, `is_null`, `is_index`, `is_unique`, `sort_num`, `note`, `status`, `form_type`, `relation_model_id`, `relation_field_id`, `relation_condition`, `form_default`, `is_label`, `is_primary_key`, `is_auto_increment`, `is_signed`, `column_width`, `is_show`, `is_fixed`, `is_filter`, `filter_field`, `filter_form_name`) VALUES
( ' . $data['id'] . ', \'ID\', \'id\', \'int\', 11, 2, 1, 1, 1, \'自增ID\', 2, \'hidden\', 0, NULL, \'\', \' \', 2, 1, 1, 1, 150, 1, 2, 1, \'\', \'\'),
( ' . $data['id'] . ', \'状态\', \'status\', \'tinyint\', 4, 1, 2, 2, 2, \'状态：1=开启，2=关闭\', 1, \'radio\', 0, NULL, \'\', \'1\', 2, 2, 2, 1, 150, 1, 2, 1, \'\', \'\');';
                Db::execute($sql);

                //向model_operate表写入相应记录
                Db::execute('DELETE FROM `' . $this->prefix . 'model_operate` where model_id = ' . $data['id'] . ';');
                $sql = 'INSERT INTO `' . $this->prefix . 'model_operate` ( `operate_name`, `label`, `api_path`, `model_id`, `operate_type`, `status`) VALUES
(\'get_' . $model_name . '_list\', \'获取' . $data['label'] . '列表\', \'/' . $model_name . '\', ' . $data['id'] . ', \'list\', 1),
(\'save_' . $model_name . '\', \'保存' . $data['label'] . '\', \'/' . $model_name . '/save\', ' . $data['id'] . ', \'save\', 1),
(\'del_' . $model_name . '\', \'删除' . $data['label'] . '\', \'/' . $model_name . '/del\', ' . $data['id'] . ', \'del\', 1),
(\'set_' . $model_name . '_status\', \'设置' . $data['label'] . '状态\', \'/' . $model_name . '/setStatus\', ' . $data['id'] . ', \'status\', 1),
(\'get_' . $model_name . '_detail\', \'查看' . $data['label'] . '详情\', \'/' . $model_name . '/getDetail\', ' . $data['id'] . ', \'detail\', 1),
(\'get_' . $model_name . '_category\', \'获取' . $data['label'] . '目录\', \'/category/tree\', ' . $data['id'] . ', \'category\', 1);
';
                Db::execute($sql);

                //更新auth_model对应模型的主操作ID
                $main_operate_id = Db::name('model_operate')->where('operate_type', 'list')->where('model_id', $data['id'])->value('id');
                Db::name('auth_model')->where('id', $data['id'])->setField('main_operate_id', $main_operate_id);

                //向vc_field_option表增加状态选项值
                Db::execute('DELETE FROM `' . $this->prefix . 'field_option` where model_id = ' . $data['id'] . ';');
                $status_field_id = Db::name('model_field')->where('model_id', $data['id'])->where('field_name', 'status')->value('id');
                $sql = 'INSERT INTO `' . $this->prefix . 'field_option` ( `model_id`, `model_field_id`, `option_value`, `option_label`, `status`) VALUES
( ' . $data['id'] . ',' . $status_field_id . ', 1, "开启", 1),
( ' . $data['id'] . ',' . $status_field_id . ', 2, "关闭", 1);';
                Db::execute($sql);
            }

            Db::commit();

        }catch (Exception $e){
            Db::rollback();
            throw new Exception($e->getMessage(). ' '.$e->getFile().' '.$e->getLine());
        }
    }


    /**
     * 清除模型
     * @param $data
     * @throws Exception
     */
    public function clearModel($data){
        try{
            if(empty($data['model_name'])) throw new Exception('模型名不能为空');
            if(empty($data['id'])) throw new Exception('模型ID不能为空');
            $model_name = getModelTableName($data['model_name']);
            $model_class_name = Loader::parseName($model_name,1);

            if(file_exists(__DIR__.'/../controller/'.$model_class_name.'.php'))
                unlink(__DIR__.'/../controller/'.$model_class_name.'.php');
            if(file_exists(__DIR__.'/../model/'.$model_class_name.'.php'))
                unlink(__DIR__.'/../model/'.$model_class_name.'.php');
            if(file_exists(__DIR__.'/../validate/'.$model_class_name.'.php'))
                unlink(__DIR__.'/../validate/'.$model_class_name.'.php');

            Db::name('auth_menu')->where('model_id')->delete();

            Db::execute('DELETE FROM `'.$this->prefix .'model_field` where model_id = '.$data['id'].';');
            Db::execute('DELETE FROM `'.$this->prefix .'model_operate` where model_id = '.$data['id'].';');
            Db::execute('DELETE FROM `'.$this->prefix .'field_option` where model_id = '.$data['id'].';');
            Db::execute('DROP TABLE `'.$this->prefix .$model_name.'`');

        }catch (Exception $exception){
            throw new Exception($exception->getMessage());
        }
    }


    /**
     * 获取模型列表树
     * @param $keyword
     * @return array
     * @throws Exception
     */
    public function tree($keyword){
        try{
            if(empty($keyword)){
                $data = $this->model->field('id,label as title')->where('status',1)->select()->toArray();
            }else{
                $data = $this->model->field('id,label as title')->where('status',1)->where('label','like','%'.$keyword.'%')->select()->toArray();
            }

            if(!empty($data)){
                foreach ($data as &$val){
                    $val['expand'] = true;
                }
            }

            return [
                [
                    'id' => 0,
                    'title' => '全部',
                    'expand' => true,
                    'children' => $data
                ],
            ];
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }

    }

    /**
     * 获取模型名称
     * @param $modelId
     * @return mixed
     * @throws Exception
     */
    public function getModelName($modelId){
        try{
            return $this->model->where([
                ['id','=',$modelId],
                ['status','=',1]
            ])->value('model_name');
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


    /**
     * 获取模型表名，不带表前缀
     * @param $modelId
     * @return mixed
     * @throws Exception
     */
    public function getModelTableName($modelId){
        try{
            $model_name = $this->getModelName($modelId);
            return getModelTableName($model_name);
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


}
