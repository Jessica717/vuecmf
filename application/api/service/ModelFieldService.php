<?php
/**
 * Created by vuecmf <http://www.vuecmf.com> .
 * User: emei8 <386196596@qq.com>
 * Date: 2019/3/20
 * Time: 23:07
 */

namespace app\api\service;


use think\Db;
use think\Exception;
use think\Loader;

class ModelFieldService extends BaseService
{

    protected $prefix; //表前缀

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->model = model('ModelField'); //初始化模型
        $this->prefix = config('database.prefix');
    }

    /**
     * 根据模型ID生成相应数据表( 暂未用到 )
     * @param int $modelId  模型ID
     * @throws Exception
     */
    public function makeTable($modelId){
        try{
            $fields_info = $this->getModelFieldsByModelId($modelId);
            //开始转换创建数据表SQL
            //获取模型名称
            $model_info = model('AuthModel')->where([
                ['id','=',$modelId],
                ['status','=',1]
            ])->field('model_name,remark')->find();
            $sql = 'CREATE TABLE `'.$this->model->getTable(getModelTableName($model_info->model_name)).'` (';

            $pk_field_arr = [];//主键字段
            $index_field_arr = []; //索引字段
            $unique_field_arr = []; //唯一字段
            $foreign_key_sql = ''; //外键

            foreach ($fields_info as $val){
                //有无符号（可为负数）
                $is_signed = '';
                $val->is_signed == 2 && in_array(strtolower($val->type),['tinyint','smallint','int','bigint','float','double']) &&  $is_signed = 'unsigned';
                //是否为空
                $is_null = $val->is_null == 2 ? 'NOT NULL' : '';
                //默认值
                $default = $val->is_auto_increment == 1 ? 'AUTO_INCREMENT' : 'DEFAULT \''. trim($val->form_default) .'\'';
                //是否自增
                $val->is_auto_increment != 1 && in_array(strtolower($val->type),['tinyint','smallint','int','bigint','float','double']) && empty(trim($val->form_default)) && $default = 'DEFAULT \'0\'';

                $field_sql = '`'.$val->field_name.'` '.$val->type.'('.$val->length.') ' . $is_signed . ' ' . $is_null.' '.$default.' COMMENT \'' . $val->note . '\',';
                //枚举类型字段
                strtolower($val->type) == 'enum' && $field_sql = '`'.$val->field_name.'` enum(' . $val->enum_content . ') ' . $default . ' COMMENT \''. $val->note .'\',';

                $sql .= $field_sql;

                $val->is_primary_key == 1 && array_push($pk_field_arr,$val->field_name);
                $val->is_index == 1 && array_push($index_field_arr,$val->field_name);
                $val->is_unique == 1 && array_push($unique_field_arr,$val->field_name);

                !empty(trim($val->relation_model)) && !empty(trim($val->relation_field)) && $foreign_key_sql .= 'CONSTRAINT `foreign_'.$val->field_name.'` FOREIGN KEY (`'.$val->field_name.'`) REFERENCES `' . $this->model->getTable(getModelTableName($val->relation_model)) . '` (`'.$val->relation_field.'`) ON DELETE SET NULL ON UPDATE NO ACTION,';
            }

            !empty($unique_field_arr) && $sql .= 'UNIQUE KEY `unique_field` (`' . implode('`,`',$unique_field_arr) . '`) USING BTREE,';
            !empty($index_field_arr) && $sql .= 'KEY `index_field` (`' . implode('`,`',$index_field_arr) . '`),';
            !empty($foreign_key_sql) && $sql .= $foreign_key_sql;
            !empty($pk_field_arr) && $sql .= 'PRIMARY KEY (`' . implode('`,`',$pk_field_arr) . '`)';

            $sql .= ') ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=\'' . $model_info->remark . '\';';

            $res = $this->model->execute($sql);

            if($res == false) throw new Exception('生成表失败');
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }

    }

    /**
     * 更新模型字段
     * @param $data
     * @throws Exception
     */
    public function updateModelField($data){
        try{
            $table_name = model('AuthModelService','service')->getModelTableName($data['model_id']);
            $sql = '';
            $alter_table = 'ALTER TABLE ' . $this->prefix . $table_name;
            $is_add_index = false;
            $index_sql = '';

            if(!empty($data['id'])){
                //修改表字段信息
                $index_res = Db::name($table_name)->query('SHOW INDEX FROM '.$this->prefix . $table_name.';');
                $index_arr = [];
                $primary_arr = [];
                $unique_arr = [];
                if(!empty($index_res)){
                    foreach ($index_res as $val){
                        array_push($index_arr,$val['Column_name']);
                        if($val['Key_name'] == 'PRIMARY'){
                            array_push($primary_arr,$val['Column_name']);
                        }
                        if($val['Non_unique'] == 0){
                            array_push($unique_arr,$val['Column_name']);
                        }
                    }
                }

                if(empty($index_arr)){
                    $is_add_index = true;
                }else{

                    if($data['is_index'] == 1 && !in_array($data['field_name'],$index_arr)){
                        $index_sql .= $alter_table . ' ADD INDEX `'.$data['field_name'].'` (`'.$data['field_name'].'`); ';
                    }else if($data['is_index'] == 2 && in_array($data['field_name'],$index_arr)){
                        $index_sql .= $alter_table . ' DROP INDEX `'.$data['field_name'].'`; ';
                    }

                    if($data['is_unique'] == 1 && !in_array($data['field_name'],$unique_arr)){
                        $index_sql = $alter_table . ' ADD UNIQUE INDEX `'.$data['field_name'].'` (`'.$data['field_name'].'`); ';
                    }else if($data['is_unique'] == 2 && in_array($data['field_name'],$unique_arr)){
                        $index_sql = $alter_table . ' DROP INDEX `'.$data['field_name'].'`; ';
                    }

                    if($data['is_primary_key'] == 1 && !in_array($data['field_name'],$primary_arr)){
                        $index_sql .= $alter_table . ' ADD PRIMARY KEY (`'.$data['field_name'].'`); ';
                    }else if($data['is_primary_key'] == 2 && in_array($data['field_name'],$primary_arr)){
                        foreach ($primary_arr as $k=>$v){
                            if($v == $data['field_name']) unset($primary_arr[$k]);
                        }
                        $index_sql .= $alter_table . ' DROP PRIMARY KEY; '.$alter_table . ' ADD PRIMARY KEY (`'.implode('`,`',$primary_arr).'`); ';
                    }

                }

                $action = ' MODIFY ';
            }else{
                //添加表字段信息
                $is_add_index = true;
                $action = ' ADD ';
            }

            $sql .= $alter_table . $action;

            //有无符号（可为负数）
            $is_signed = '';
            $data['is_signed'] == 2 && in_array(strtolower($data['type']),['tinyint','smallint','int','bigint','float','double']) &&  $is_signed = 'unsigned';
            //是否为空
            $is_null = $data['is_null'] == 2 ? 'NOT NULL' : '';
            //默认值
            $default = $data['is_auto_increment'] == 1 ? 'AUTO_INCREMENT' : 'DEFAULT \''. trim($data['form_default']) .'\'';
            //是否自增
            $data['is_auto_increment'] != 1 && in_array(strtolower($data['type']),['tinyint','smallint','int','bigint','float','double']) && empty(trim($data['form_default'])) && $default = 'DEFAULT \'0\'';

            $field_sql = '`'.$data['field_name'].'` '.$data['type'].'('.$data['length'].') ' . $is_signed . ' ' . $is_null.' '.$default.' COMMENT \'' . $data['note'] . '\';';
            //枚举类型字段
            strtolower($data['type']) == 'enum' && $field_sql = '`'.$data['field_name'].'` enum(' . $data['enum_content'] . ') ' . $default . ' COMMENT \''. $data['note'] .'\';';

            $sql .= $field_sql;

            !empty($sql) && Db::execute($sql);

            if($is_add_index){
                $data['is_index'] == 1 && $index_sql .= $alter_table . ' ADD INDEX `'.$data['field_name'].'` (`'.$data['field_name'].'`); ';
                $data['is_unique'] == 1 && $index_sql = $alter_table . ' ADD UNIQUE INDEX `'.$data['field_name'].'` (`'.$data['field_name'].'`); ';
                $data['is_primary_key'] == 1 && $index_sql .= $alter_table . ' ADD PRIMARY KEY (`'.$data['field_name'].'`); ';
            }

            !empty($index_sql) && Db::execute($index_sql);

            model('AuthModelService','service')->makeModel($table_name.'_model');

        }catch (Exception $e){
            throw new Exception($e->getMessage(). ' '.$e->getFile().' '.$e->getLine());
        }
    }

    /**
     * 删除模型字段
     * @param $data
     * @throws Exception
     */
    public function delModelField($data){
        try{
            //删除表字段
            if(empty($data['model_id'])) throw new Exception('模型ID缺失！');
            if(empty($data['field_name'])) throw new Exception('字段名缺失！');

            $table_name = model('AuthModelService','service')->getModelTableName($data['model_id']);
            Db::execute('ALTER TABLE ' . $this->prefix . $table_name .'  DROP  '.$data['field_name']);

            //根据字段ID删除字段选项表中相关值
            Db::name('field_option')->where('model_field_id',$data['id'])->delete();

            model('AuthModelService','service')->makeModel($table_name.'_model');

        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


    /**
     * 获取指定模型的所有字段信息
     * @param object $modelInstance  模型实例
     * @return array
     * @throws Exception
     */
    public function getFieldInfo($modelInstance){
        try{
            if(empty($modelInstance)) throw new Exception('模型缺失！');
            $data = [];

            $model_name = Loader::parseName($modelInstance->getName()).'_model';
            $modelId = model('AuthModel')->where('model_name',$model_name)->value('id');

            $field_info = $this->model
                ->where('model_id',$modelId)
                ->where('status',1)
                ->order('sort_num')
                ->select();

            foreach ($field_info as $key => $val){
                $data[$key]['field_id'] = $val['id']; //字段列表中的ID值
                $data[$key]['prop'] = $val['field_name']; //字段名称
                $data[$key]['label'] = $val['label']; //字段显示名称
                $data[$key]['sortable'] = true; //是否有排序功能
                $data[$key]['width'] = $val['column_width']; //列宽度
                $data[$key]['data_form'] = (!empty($val['form_type']) && $val['form_type'] != 'hidden') ? true : false; //是否为数据表单
                $val['is_null'] == 2 && $data[$key]['data_form'] && $val['is_auto_increment'] == 2 && $data[$key]['validate'] = [
                     [ 'required' => true, 'message' => '表单必填', 'trigger' => 'blur' ]
                 ]; //表单验证规则
                $data[$key]['show'] = $val['is_show'] == 1 ? true : false; //是否在列表中显示
                $data[$key]['fixed'] = $val['is_fixed'] == 1 ? true : false; //是否固定列
                $data[$key]['filter'] = $val['is_filter'] == 1 ? true : false; //是否固定列
                $data[$key]['data_type'] = $val['form_type'];
                $data[$key]['tooltip'] = $val['note'];
                $data[$key]['filter_field'] = $val['filter_field'];
                $data[$key]['filter_form_name'] = $val['filter_form_name'];
                $data[$key]['filter_url'] = url('ModelField/getRelationOptions','',true,true);
                $data[$key]['model_id'] = $val['model_id'];
                $data[$key]['relation_model_id'] = $val['relation_model_id'];

                //如果是文件类型，设置可上传扩展名
                if($val['form_type'] == 'image' || $val['form_type'] == 'img' ){
                    $data[$key]['extension'] = ['jpg','jpeg','png','gif','bmp'];
                }else if($val['form_type'] == 'file'){
                    $data[$key]['extension'] = ['zip','rar','xls','xlsx','doc','docx','pdf'];
                }

                //默认值处理
                if(in_array($val['type'],['tinyint','smallint','int','bigint'])){
                    $data[$key]['default'] = intval(trim($val['form_default']));
                }else if($val['type'] == 'float'){
                    $data[$key]['default'] = floatval(trim($val['form_default']));
                }else if($val['type'] == 'double'){
                    $data[$key]['default'] = doubleval(trim($val['form_default']));
                }else{
                    $data[$key]['default'] = trim($val['form_default']);
                }



                if($val['form_type'] == 'select' || $val['form_type'] == 'radio'){
                    if($val['relation_field_id']){  //有关联字段的,取关联模型的列表
                        $relation_field = $this->model->where('id',$val['relation_field_id'])->value('field_name');
                        $relation_field_label = $this->model->where('is_label',1)->where('model_id',$val['relation_model_id'])->value('field_name');
                        if(empty($relation_field) || empty($relation_field_label)) throw new Exception('关联字段错误！');
                        $table_name = model('AuthModel')->where('id',$val['relation_model_id'])->value('model_name');
                        $table_name = getModelTableName($table_name);
                        $db_query = Db::name($table_name)->where('status',1);
                        !empty($val['relation_condition']) && $db_query->whereRaw($val['relation_condition']);
                        $data[$key]['options'] = $db_query->column($relation_field_label,$relation_field);
                    }else{ //否则，从字段值选项模型中取
                        $data[$key]['options'] = model('FieldOption')
                            ->where('model_id',$val['model_id'])
                            ->where('model_field_id',$val['id'])
                            ->where('status',1)
                            ->column('option_label','option_value');
                    }
                }


            }

            return [
                'fields' => $data
            ];
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


    /**
     * @param string $field_id  通过此字段ID 查询出关联的模型
     * @param string $filter_field  在关联模型中要作为筛选条件的字段
     * @param string $sel_val 筛选条件的值
     * @return array|bool
     * @throws Exception
     */
    public function getRelationOptions($field_id, $filter_field, $sel_val){
        try{
            if(empty($field_id) || empty($filter_field) || empty($sel_val)) return false;

            $data = $this->model->alias('MF')
                ->field('AM.model_name,MF2.field_name,MF.relation_model_id')
                ->join('auth_model AM','MF.relation_model_id = AM.id')
                ->join('model_field MF2','MF2.id = MF.relation_field_id')
                ->where('MF.id',$field_id)->find();
            if(empty($data)) return false;
            $table_name = getModelTableName($data['model_name']);

            $relation_field_label = $this->model->where('is_label',1)->where('model_id',$data['relation_model_id'])->value('field_name');

            return Db::name($table_name)
                ->where('status',1)
                ->where($filter_field,$sel_val)
                ->column($relation_field_label,$data['field_name']);

        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


    /**
     * 根据模型ID获取模型的所有字段信息
     * @param int $modelId 模型ID
     * @return array|string|\think\Model|null
     * @throws Exception
     */
    public function getModelFieldsByModelId($modelId){
        try{
            $res = $this->model->where('model_id',$modelId)->order('sort_num')->select();
            return $res;
        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }
    }


}
